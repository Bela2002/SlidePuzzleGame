import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.sql.Connection; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 
import java.sql.Statement; 

import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import java.io.File;
import java.io.InputStream;
import java.net.URL;
import javax.sound.sampled.LineEvent;
import javax.swing.ImageIcon;
import javax.swing.JTextArea;




/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Belani
 */
public class SlidePuzzleGame extends javax.swing.JFrame {
    
    private boolean isPlayingWithTime;
    private boolean isPlayingWithMoves;
    
    private JTable table;
    private DefaultTableModel tableModel;
    
    private List<JButton> puzzleButtons = new ArrayList<>();
    
    private Timer timer;
    private long StartTime;
    

    /** Creates new form SlidePuzzleGame */
    public SlidePuzzleGame() {
       
        initComponents();
      
        tableModel = new DefaultTableModel();

        table = new JTable(tableModel);
        
        InitializePuzzleButtons();
        
        timer = new Timer(1000, new ActionListener() {
        
        public void actionPerformed(ActionEvent e) {
            UpdateTimingLable();
        }
    });
    }

    
    private String userName;

    public SlidePuzzleGame(String userName){
        
        this.userName = userName;
        
        initComponents();

        playAudio("Wav/Better Every Day.wav"); 
        
        tableModel = new DefaultTableModel();

        table = new JTable(tableModel);
        
        InitializePuzzleButtons();
        
        timer = new Timer(1000, new ActionListener() {
        
            public void actionPerformed(ActionEvent e) {
                
                UpdateTimingLable();
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        LabelName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Button1 = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        Button7 = new javax.swing.JButton();
        Button8 = new javax.swing.JButton();
        Button9 = new javax.swing.JButton();
        Button10 = new javax.swing.JButton();
        Button11 = new javax.swing.JButton();
        Button12 = new javax.swing.JButton();
        Button13 = new javax.swing.JButton();
        Button14 = new javax.swing.JButton();
        Button15 = new javax.swing.JButton();
        Button16 = new javax.swing.JButton();
        ButtonMove1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        ButtonPlayWithMoves = new javax.swing.JButton();
        jButtonPlayWithTime = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ButtonStartNewGame = new javax.swing.JButton();
        LabelMoves = new javax.swing.JLabel();
        LabelNoOfMoves = new javax.swing.JLabel();
        LabelTime = new javax.swing.JLabel();
        LabelTiming = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        ButtonAutoSolve = new javax.swing.JButton();
        ButtonExit = new javax.swing.JButton();
        ButtonPlayers = new javax.swing.JButton();
        ButtonBestPlayer = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        LabelName.setFont(new java.awt.Font("Showcard Gothic", 0, 80)); // NOI18N
        LabelName.setForeground(new java.awt.Color(255, 255, 255));
        LabelName.setText(" SLIDE PUZZLE ");
        jPanel3.add(LabelName);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 930, 120));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Button1.setBackground(new java.awt.Color(204, 204, 204));
        Button1.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button1.setText("1");
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });
        jPanel1.add(Button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 80, 80));

        Button2.setBackground(new java.awt.Color(204, 204, 204));
        Button2.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button2.setText("2");
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });
        jPanel1.add(Button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 80, 80));

        Button3.setBackground(new java.awt.Color(204, 204, 204));
        Button3.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button3.setText("3");
        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });
        jPanel1.add(Button3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 80, 80));

        Button4.setBackground(new java.awt.Color(204, 204, 204));
        Button4.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button4.setText("4");
        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });
        jPanel1.add(Button4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 80, 80));

        Button5.setBackground(new java.awt.Color(204, 204, 204));
        Button5.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button5.setText("5");
        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });
        jPanel1.add(Button5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 80, 80));

        Button6.setBackground(new java.awt.Color(204, 204, 204));
        Button6.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button6.setText("6");
        Button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button6ActionPerformed(evt);
            }
        });
        jPanel1.add(Button6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 80, 80));

        Button7.setBackground(new java.awt.Color(204, 204, 204));
        Button7.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button7.setText("7");
        Button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button7ActionPerformed(evt);
            }
        });
        jPanel1.add(Button7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 80, 80));

        Button8.setBackground(new java.awt.Color(204, 204, 204));
        Button8.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button8.setText("8");
        Button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button8ActionPerformed(evt);
            }
        });
        jPanel1.add(Button8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 130, 80, 80));

        Button9.setBackground(new java.awt.Color(204, 204, 204));
        Button9.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button9.setText("9");
        Button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button9ActionPerformed(evt);
            }
        });
        jPanel1.add(Button9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 80, 80));

        Button10.setBackground(new java.awt.Color(204, 204, 204));
        Button10.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button10.setText("10");
        Button10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button10ActionPerformed(evt);
            }
        });
        jPanel1.add(Button10, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 230, 80, 80));

        Button11.setBackground(new java.awt.Color(204, 204, 204));
        Button11.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button11.setText("11");
        Button11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button11ActionPerformed(evt);
            }
        });
        jPanel1.add(Button11, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 80, 80));

        Button12.setBackground(new java.awt.Color(204, 204, 204));
        Button12.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button12.setText("12");
        Button12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button12ActionPerformed(evt);
            }
        });
        jPanel1.add(Button12, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 80, 80));

        Button13.setBackground(new java.awt.Color(204, 204, 204));
        Button13.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button13.setText("13");
        Button13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button13ActionPerformed(evt);
            }
        });
        jPanel1.add(Button13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 80, 80));

        Button14.setBackground(new java.awt.Color(204, 204, 204));
        Button14.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button14.setText("14");
        Button14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button14ActionPerformed(evt);
            }
        });
        jPanel1.add(Button14, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, 80, 80));

        Button15.setBackground(new java.awt.Color(204, 204, 204));
        Button15.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button15.setText("15");
        Button15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button15ActionPerformed(evt);
            }
        });
        jPanel1.add(Button15, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 330, 80, 80));

        Button16.setBackground(new java.awt.Color(204, 204, 204));
        Button16.setFont(new java.awt.Font("Showcard Gothic", 0, 40)); // NOI18N
        Button16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button16ActionPerformed(evt);
            }
        });
        jPanel1.add(Button16, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 330, 80, 80));

        ButtonMove1.setFont(new java.awt.Font("Sinhala Sarasavi", 1, 25)); // NOI18N
        jPanel1.add(ButtonMove1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 330, 80, 80));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 440, 440));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ButtonPlayWithMoves.setFont(new java.awt.Font("Showcard Gothic", 0, 16)); // NOI18N
        ButtonPlayWithMoves.setText(" Play With Limited Moves");
        ButtonPlayWithMoves.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        ButtonPlayWithMoves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPlayWithMovesActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonPlayWithMoves, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 270, 50));

        jButtonPlayWithTime.setFont(new java.awt.Font("Showcard Gothic", 0, 18)); // NOI18N
        jButtonPlayWithTime.setText("Play With Limited Time");
        jButtonPlayWithTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jButtonPlayWithTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayWithTimeActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonPlayWithTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 270, 50));

        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Play With Options");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        ButtonStartNewGame.setFont(new java.awt.Font("Showcard Gothic", 0, 24)); // NOI18N
        ButtonStartNewGame.setText("Play New Game");
        ButtonStartNewGame.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        ButtonStartNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartNewGameActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonStartNewGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 230, 60));

        LabelMoves.setFont(new java.awt.Font("Showcard Gothic", 0, 30)); // NOI18N
        LabelMoves.setForeground(new java.awt.Color(255, 255, 255));
        LabelMoves.setText("Moves");
        jPanel2.add(LabelMoves, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 110, 80));

        LabelNoOfMoves.setFont(new java.awt.Font("Showcard Gothic", 0, 30)); // NOI18N
        LabelNoOfMoves.setForeground(new java.awt.Color(255, 255, 255));
        LabelNoOfMoves.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNoOfMoves.setText("              ");
        LabelNoOfMoves.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jPanel2.add(LabelNoOfMoves, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 370, 140, 60));

        LabelTime.setFont(new java.awt.Font("Showcard Gothic", 0, 30)); // NOI18N
        LabelTime.setForeground(new java.awt.Color(255, 255, 255));
        LabelTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTime.setText("Time");
        jPanel2.add(LabelTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 440, 130, 80));

        LabelTiming.setFont(new java.awt.Font("Showcard Gothic", 0, 30)); // NOI18N
        LabelTiming.setForeground(new java.awt.Color(255, 255, 255));
        LabelTiming.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTiming.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jPanel2.add(LabelTiming, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 500, 150, 50));

        jLabel3.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Or");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 90, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 170, 310, 610));

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ButtonAutoSolve.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        ButtonAutoSolve.setText("Auto Solve");
        ButtonAutoSolve.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        ButtonAutoSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAutoSolveActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonAutoSolve, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 170, 50));

        ButtonExit.setFont(new java.awt.Font("Showcard Gothic", 0, 30)); // NOI18N
        ButtonExit.setText("EXIT");
        ButtonExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        ButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 170, 60));

        ButtonPlayers.setFont(new java.awt.Font("Showcard Gothic", 1, 20)); // NOI18N
        ButtonPlayers.setText("Win Players");
        ButtonPlayers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        ButtonPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPlayersActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonPlayers, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 230, 60));

        ButtonBestPlayer.setFont(new java.awt.Font("Showcard Gothic", 0, 24)); // NOI18N
        ButtonBestPlayer.setText("Best Player");
        ButtonBestPlayer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        ButtonBestPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBestPlayerActionPerformed(evt);
            }
        });
        jPanel4.add(ButtonBestPlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 230, 60));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 270, 280, 420));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Wallpaper 2.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 810));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
//*********************************************************************************************************************************************************
 
   private void playAudio(String audioFilePath) {
       
       try {
            
           InputStream inputStream = SlidePuzzleGame.class.getClassLoader().getResourceAsStream(audioFilePath);
            
           if (inputStream != null) {
                
               AudioInputStream audioStream = AudioSystem.getAudioInputStream(new BufferedInputStream(inputStream));
               
                Clip clip = AudioSystem.getClip();
                clip.open(audioStream);
                clip.loop(Clip.LOOP_CONTINUOUSLY);
                clip.start();
           } 
           else {
               
               System.out.println("Audio file not found: " + audioFilePath);
           }
        } 
       catch (Exception e) {
            
           System.out.println("Error playing audio: " + e.getMessage());
        }
    } 
   
   
    private void playSoundEffect(String soundEffectFilePath) {
       
        try {
            
            InputStream inputStream = SlidePuzzleGame.class.getClassLoader().getResourceAsStream(soundEffectFilePath);
           
            if (inputStream != null) {

                AudioInputStream soundEffectStream = AudioSystem.getAudioInputStream(new BufferedInputStream(inputStream));
                    
                Clip soundEffectClip = AudioSystem.getClip();
                soundEffectClip.open(soundEffectStream);
                soundEffectClip.start();

            } 
            else 
            {
                System.out.println("Sound effect file not found: " + soundEffectFilePath);
            }
        } 
        catch (Exception e) {
            
            System.out.println("Error playing sound effect: " + e.getMessage());
        }
    }

    
//*********************************************************************************************************************************************************
    
    private void UpdateTimingLable(){
        
        long elapsedTime = System.currentTimeMillis() - StartTime;
        int seconds = (int) (elapsedTime/ 1000) % 60;
        int minutes = (int) (elapsedTime/ 60000);

        LabelTiming.setText(String.format("%d:%02d", minutes, seconds));
        
        if (elapsedTime >= 600000 && isPlayingWithTime) {
            
            timer.stop();
            playSoundEffect("Wav/answer-fail.wav");
            
            ImageIcon LostGameIcon = new ImageIcon(getClass().getResource("LostGameImage.png"));
            JOptionPane.showMessageDialog(this, "<html><b style=\"font-size:10px;\">You lost the game! Time is up.", "PUZZLE GAME", JOptionPane.INFORMATION_MESSAGE,LostGameIcon);
            
            timer = new Timer(1000, (ActionEvent e) -> {
            
                 UpdateTimingLable();
            });
             
            isPlayingWithTime = false; 
        }
        
        
        if(Counter==500 && isPlayingWithMoves){
            
            timer.stop();
            playSoundEffect("Wav/answer-fail.wav");
            
            ImageIcon LostGameIcon = new ImageIcon(getClass().getResource("LostGameImage.png"));
            JOptionPane.showMessageDialog(this, "<html><b style=\"font-size:10px;\">You lost the game! You reached the move limit.", "PUZZLE GAME", JOptionPane.INFORMATION_MESSAGE,LostGameIcon);
            
            timer = new Timer(1000, (ActionEvent e) -> {
            
                 UpdateTimingLable();
            });
            
            isPlayingWithMoves = false;
        }
    }
   
    private int Counter;
    
    private void EmptyPieceChecker(JButton Butt1,JButton Butt2){
        
        String ShuffleNumber = Butt2.getText();
        
        if(ShuffleNumber.equals("")){
            
            Butt2.setText(Butt1.getText());
            Butt1.setText("");
            
            Counter = Counter+1;
 
            LabelNoOfMoves.setText(Integer.toString(Counter));
            
            if(IsPuzzleSolved()){

                long elapsedTime = System.currentTimeMillis() - StartTime;
                
                ImageIcon WinIcon = new ImageIcon(getClass().getResource("WinnerImage.png"));
                JOptionPane.showMessageDialog(this,"<html><b style=\"font-size:10px;\">YOU WIN THE GAME!","PUZZLE GAME",JOptionPane.INFORMATION_MESSAGE,WinIcon);
                              
                saveUserTime(userName, elapsedTime);
            }
            
            playSoundEffect("Wav/long-pop.wav");
        }    
    }
    
    
//************************************************************************************************************************************************************    
   
    
   
    
    private void InitializePuzzleButtons() {
    
        puzzleButtons.add(Button1);
        puzzleButtons.add(Button2);
        puzzleButtons.add(Button3);
        puzzleButtons.add(Button4);
        puzzleButtons.add(Button5);
        puzzleButtons.add(Button6);
        puzzleButtons.add(Button7);
        puzzleButtons.add(Button8);
        puzzleButtons.add(Button9);
        puzzleButtons.add(Button10);
        puzzleButtons.add(Button11);
        puzzleButtons.add(Button12);
        puzzleButtons.add(Button13);
        puzzleButtons.add(Button14);
        puzzleButtons.add(Button15);
        puzzleButtons.add(Button16);

    }
    
    
    private void ShufflePuzzle(){
     
        Counter = 0;
        
        Collections.shuffle(puzzleButtons);
        
        UpdateButtonLabels();
        
        StartTime = System.currentTimeMillis();
 
        timer.start();
    }

    
    private void UpdateButtonLabels(){
        
         for (int i = 0; i < puzzleButtons.size(); i++){
             
            JButton button = puzzleButtons.get(i);
            button.setText(Integer.toString(i + 1));
        }
    
        puzzleButtons.get(puzzleButtons.size() - 1).setText(""); 
    }
    
    
//**************************************************************************************************************************************************************    
 
    
    public boolean IsPuzzleSolved(){
        
        String b1 = Button1.getText();
        String b2 = Button2.getText();
        String b3 = Button3.getText();
        String b4 = Button4.getText();
        String b5 = Button5.getText();
        String b6 = Button6.getText();
        String b7 = Button7.getText();
        String b8 = Button8.getText();
        String b9 = Button9.getText();
        String b10 = Button10.getText();
        String b11 = Button11.getText();
        String b12 = Button12.getText();
        String b13 = Button13.getText();
        String b14 = Button14.getText();
        String b15 = Button15.getText();
        String b16 = Button16.getText();
        
        if(b1.equals("1")  && b2.equals("2") && b3.equals("3") && b4.equals("4") && b5.equals("5") && b6.equals("6") && b7.equals("7") && b8.equals("8") && b9.equals("9") && b10.equals("10") && b11.equals("11") && b12.equals("12") && b13.equals("13") && b14.equals("14") && b15.equals("15")&& b16.equals("")){
         
            timer.stop();
            return true;    
        }
        
        return false;
            
                
    }
    
//***************************************************************************************************************************************************   


    public void saveUserTime(String userName, long time) {
       String sql = "INSERT INTO users (Name, Time) VALUES (?,?)";

       try (Connection conn = ConnectDB.getConnection();
            PreparedStatement pstmt = conn.prepareStatement(sql)) {

           pstmt.setString(1, userName);
           pstmt.setLong(2, time);
           pstmt.executeUpdate();

       } catch (SQLException e) {
           System.out.println(e.getMessage());
       }
    }
    
    
    private String convertTime(long timeInMilliseconds) {
        
        long Playerseconds = (timeInMilliseconds / 1000) % 60;
        long Playerminutes = (timeInMilliseconds / (1000 * 60)) % 60;

        return String.format("%d:%02d", Playerminutes, Playerseconds);
    }
    
    
    private List<User> getUsers() {
        
        List<User> users = new ArrayList<>();

        String sql = "SELECT * FROM users";

        try (Connection conn = ConnectDB.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                User user = new User();
                user.setName(rs.getString("Name"));
                user.setTime(rs.getLong("Time"));
                user.setTimeString(convertTime(user.getTime()));
                users.add(user);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return users;
    }
 
    
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
    
       
    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button4,Button3);
        EmptyPieceChecker(Button4,Button8);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button4ActionPerformed

    private void Button11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button11ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button11,Button7);
        EmptyPieceChecker(Button11,Button10);
        EmptyPieceChecker(Button11,Button12);
        EmptyPieceChecker(Button11,Button15);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button11ActionPerformed

    private void Button12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button12ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button12,Button8);
        EmptyPieceChecker(Button12,Button11);
        EmptyPieceChecker(Button12,Button16);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button12ActionPerformed

    private void Button13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button13ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button13,Button9);
        EmptyPieceChecker(Button13,Button14);
        
       IsPuzzleSolved();
    }//GEN-LAST:event_Button13ActionPerformed

    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button1,Button2);
        EmptyPieceChecker(Button1,Button5);
        
       IsPuzzleSolved();
    }//GEN-LAST:event_Button1ActionPerformed

    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button2,Button1);
        EmptyPieceChecker(Button2,Button3);
        EmptyPieceChecker(Button2,Button6);   
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button2ActionPerformed

    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button3,Button2);
        EmptyPieceChecker(Button3,Button4);
        EmptyPieceChecker(Button3,Button7);
        
       IsPuzzleSolved();
    }//GEN-LAST:event_Button3ActionPerformed

    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button5,Button1);
        EmptyPieceChecker(Button5,Button6);
        EmptyPieceChecker(Button5,Button9);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button5ActionPerformed

    private void Button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button6ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button6,Button2);
        EmptyPieceChecker(Button6,Button5);
        EmptyPieceChecker(Button6,Button7);
        EmptyPieceChecker(Button6,Button10);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button6ActionPerformed

    private void Button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button7ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button7,Button3);
        EmptyPieceChecker(Button7,Button6);
        EmptyPieceChecker(Button7,Button8);
        EmptyPieceChecker(Button7,Button11);
        
      IsPuzzleSolved();
    }//GEN-LAST:event_Button7ActionPerformed

    private void Button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button8ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button8,Button4);
        EmptyPieceChecker(Button8,Button7);
        EmptyPieceChecker(Button8,Button12);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button8ActionPerformed

    private void Button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button9ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button9,Button5);
        EmptyPieceChecker(Button9,Button10);
        EmptyPieceChecker(Button9,Button13);
        
       IsPuzzleSolved();
    }//GEN-LAST:event_Button9ActionPerformed

    private void Button10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button10ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button10,Button6);
        EmptyPieceChecker(Button10,Button9);
        EmptyPieceChecker(Button10,Button11);
        EmptyPieceChecker(Button10,Button14);
        
      IsPuzzleSolved();
    }//GEN-LAST:event_Button10ActionPerformed

    private void Button14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button14ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button14,Button10);
        EmptyPieceChecker(Button14,Button13);
        EmptyPieceChecker(Button14,Button15);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button14ActionPerformed

    private void Button15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button15ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button15,Button11);
        EmptyPieceChecker(Button15,Button14);
        EmptyPieceChecker(Button15,Button16);
        
       IsPuzzleSolved();
    }//GEN-LAST:event_Button15ActionPerformed

    private void Button16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button16ActionPerformed
        // TODO add your handling code here:
        EmptyPieceChecker(Button16,Button12);
        EmptyPieceChecker(Button16,Button15);
        
        IsPuzzleSolved();
    }//GEN-LAST:event_Button16ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void ButtonBestPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBestPlayerActionPerformed
        // TODO add your handling code here:
        playSoundEffect("Wav/bubble-pop.wav");
        
        String sql = "SELECT Name, Time FROM users ORDER BY Time ASC LIMIT 1";

        try (Connection conn = ConnectDB.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                String winnerName = rs.getString("Name");
                long winnerTime = rs.getLong("Time");
                String timeString = convertTime(winnerTime);
                
                ImageIcon BestPlayerIcon = new ImageIcon(getClass().getResource("BestPlayer.png"));
                JOptionPane.showMessageDialog(this, "<html><b style=\"font-size:10px;\">The winner is " + winnerName + " with a time of " + timeString + ".", "Best Player",JOptionPane.INFORMATION_MESSAGE,BestPlayerIcon);
            }

        } 
        catch (SQLException e) {
            
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_ButtonBestPlayerActionPerformed

  
    private void ButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitActionPerformed
        // TODO add your handling code here:
        playSoundEffect("Wav/bubble-pop.wav");
     
        ImageIcon exitIcon = new ImageIcon(getClass().getResource("ExitImage.png"));
        if(JOptionPane.showConfirmDialog(this,"<html><b style=\"font-size:10px;\">Do You Want To Exit?","PUZZLE GAME",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,exitIcon) == JOptionPane.YES_NO_OPTION){
            
            timer.stop();
            System.exit(0);
        }
    }//GEN-LAST:event_ButtonExitActionPerformed

    private void ButtonPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlayersActionPerformed
        // TODO add your handling code here:
        playSoundEffect("Wav/bubble-pop.wav");
        
        List<User> users = getUsers();
        
         DefaultTableModel tableModel = new DefaultTableModel();
         tableModel.addColumn("Name", new String[] {});
         tableModel.addColumn("Time", new String[] {});

        
        
        for (User user : users) {
            
            Object[] row = {user.getName(),user.getTimeString()};
            tableModel.addRow(row);
        }
        
        JTable table = new JTable(tableModel);
        
        JDialog dialog = new JDialog(this, "Players", true);
        dialog.add(new JScrollPane(table));
        dialog.pack();
        dialog.setVisible(true);
    }//GEN-LAST:event_ButtonPlayersActionPerformed

    private void ButtonStartNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartNewGameActionPerformed
        // TODO add your handling code here:
        playSoundEffect("Wav/bubble-pop.wav");
        
        ShufflePuzzle();
    }//GEN-LAST:event_ButtonStartNewGameActionPerformed

    private void ButtonAutoSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAutoSolveActionPerformed
            playSoundEffect("Wav/bubble-pop.wav"); 
    }//GEN-LAST:event_ButtonAutoSolveActionPerformed

    private void jButtonPlayWithTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayWithTimeActionPerformed
        // TODO add your handling code here:
        playSoundEffect("Wav/bubble-pop.wav");
        
        ImageIcon startIcon = new ImageIcon(getClass().getResource("StartImage.png"));
        JOptionPane.showMessageDialog(this, "<html><b style=\"font-size:10px;\">You have 10 minutes to play.", "Time limit", JOptionPane.INFORMATION_MESSAGE,startIcon);

    // Start the timer
        timer = new Timer(1000, (ActionEvent e) -> {
            
            UpdateTimingLable();
        });
        
        StartTime = System.currentTimeMillis();
        
        timer.start();
        
        
        isPlayingWithTime = true;
        ShufflePuzzle();
    }//GEN-LAST:event_jButtonPlayWithTimeActionPerformed

    private void ButtonPlayWithMovesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlayWithMovesActionPerformed
        // TODO add your handling code here:
        playSoundEffect("Wav/bubble-pop.wav");
        
        ImageIcon startIcon = new ImageIcon(getClass().getResource("StartImage.png"));
        JOptionPane.showMessageDialog(this, "<html><b style=\"font-size:10px;\">You have 500 moves to play.", "Move limit", JOptionPane.INFORMATION_MESSAGE,startIcon);

        // Reset the counter
        Counter = 0;
        
        timer = new Timer(1000, (ActionEvent e) -> {
            
            UpdateTimingLable();
        });
        
        StartTime = System.currentTimeMillis();
        
        timer.start();
       
        // Start the game
        isPlayingWithMoves = true;
        ShufflePuzzle();

    }//GEN-LAST:event_ButtonPlayWithMovesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException{
        
        UserLogin userLogin = new UserLogin();
        userLogin.setVisible(true);
        
        CreateTable.createNewTable();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SlidePuzzleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SlidePuzzleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SlidePuzzleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SlidePuzzleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SlidePuzzleGame().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button10;
    private javax.swing.JButton Button11;
    private javax.swing.JButton Button12;
    private javax.swing.JButton Button13;
    private javax.swing.JButton Button14;
    private javax.swing.JButton Button15;
    private javax.swing.JButton Button16;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JButton Button7;
    private javax.swing.JButton Button8;
    private javax.swing.JButton Button9;
    private javax.swing.JButton ButtonAutoSolve;
    private javax.swing.JButton ButtonBestPlayer;
    private javax.swing.JButton ButtonExit;
    private javax.swing.JButton ButtonMove1;
    private javax.swing.JButton ButtonPlayWithMoves;
    private javax.swing.JButton ButtonPlayers;
    private javax.swing.JButton ButtonStartNewGame;
    private javax.swing.JLabel LabelMoves;
    private javax.swing.JLabel LabelName;
    private javax.swing.JLabel LabelNoOfMoves;
    private javax.swing.JLabel LabelTime;
    private javax.swing.JLabel LabelTiming;
    private javax.swing.JButton jButtonPlayWithTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

}
